nimTitle	webui	webui.html	module webui		0
nim	Window	webui.html#Window	type Window		15
nim	Event	webui.html#Event	type Event		17
nim	wait	webui.html#wait	proc wait()		33
nim	exit	webui.html#exit	proc exit()		38
nim	setTimeout	webui.html#setTimeout,int	proc setTimeout(timeout: int)		43
nim	encode	webui.html#encode,string	proc encode(str: string): string		50
nim	decode	webui.html#decode,string	proc decode(str: string): string		56
nim	free	webui.html#free,pointer	proc free(ptr: pointer): string		62
nim	impl	webui.html#impl,Event	proc impl(e: Event): ptr bindings.Event		72
nim	impl=	webui.html#impl=,Event,ptr.	proc impl=(e: Event; be: ptr bindings.Event)		77
nim	element	webui.html#element,Event	proc element(e: Event): string		84
nim	window	webui.html#window,Event	proc window(e: Event): Window		87
nim	data	webui.html#data,Event	proc data(e: Event): string		90
nim	eventNumber	webui.html#eventNumber,Event	proc eventNumber(e: Event): int		93
nim	eventType	webui.html#eventType,Event	proc eventType(e: Event): bindings.Events		96
nim	getInt	webui.html#getInt,Event	proc getInt(e: Event): int		101
nim	getString	webui.html#getString,Event	proc getString(e: Event): string		106
nim	getBool	webui.html#getBool,Event	proc getBool(e: Event): bool		111
nim	returnInt	webui.html#returnInt,Event,int	proc returnInt(e: Event; n: int)		116
nim	returnString	webui.html#returnString,Event,string	proc returnString(e: Event; s: string)		121
nim	returnBool	webui.html#returnBool,Event,bool	proc returnBool(e: Event; b: bool)		126
nim	newWindow	webui.html#newWindow	proc newWindow(): Window		133
nim	newWindow	webui.html#newWindow,int	proc newWindow(windowNumber: int): Window		138
nim	getNewWindowId	webui.html#getNewWindowId	proc getNewWindowId(): int		144
nim	show	webui.html#show,Window,string	proc show(win: Window; content: string): bool		149
nim	show	webui.html#show,Window,string,	proc show(win: Window; content: string; browser: bindings.Browsers): bool		157
nim	icon=	webui.html#icon=,Window,string,string	proc icon=(win: Window; icon, type: string)		164
nim	multiAccess=	webui.html#multiAccess=,Window,bool	proc multiAccess=(win: Window; status: bool)		169
nim	kiosk=	webui.html#kiosk=,Window,bool	proc kiosk=(win: Window; status: bool)		174
nim	close	webui.html#close,Window	proc close(win: Window)		179
nim	destroy	webui.html#destroy,Window	proc destroy(win: Window)		184
nim	shown	webui.html#shown,Window	proc shown(win: Window): bool		189
nim	script	webui.html#script,Window,string,int,static[int]	proc script(win: Window; script: string; timeout: int = 0;\n       bufferLen: static[int] = 1024 * 8): tuple[data: string, error: bool]		194
nim	run	webui.html#run,Window,string	proc run(win: Window; script: string)		207
nim	`bind`	webui.html#bind,Window,string,proc(Event)	proc `bind`(win: Window; element: string; func: proc (e: Event))		232
nim	`bind`	webui.html#bind,Window,string,proc(Event)_2	proc `bind`(win: Window; element: string; func: proc (e: Event): string)		240
nim	`bind`	webui.html#bind,Window,string,proc(Event)_3	proc `bind`(win: Window; element: string; func: proc (e: Event): int)		248
nim	`bind`	webui.html#bind,Window,string,proc(Event)_4	proc `bind`(win: Window; element: string; func: proc (e: Event): bool)		256
nim	runtime=	webui.html#runtime=,Window,	proc runtime=(win: Window; runtime: bindings.Runtime)		266
nimgrp	show	webui.html#show-procs-all	proc		149
nimgrp	bind	webui.html#bind-procs-all	proc		232
nimgrp	newwindow	webui.html#newWindow-procs-all	proc		133
