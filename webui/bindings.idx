useWebuiStaticLib	webui/bindings.html#useWebuiStaticLib	bindings: useWebuiStaticLib	
useWebuiDll	webui/bindings.html#useWebuiDll	bindings: useWebuiDll	
webuiDll	webui/bindings.html#webuiDll	bindings: webuiDll	
WEBUI_VERSION	webui/bindings.html#WEBUI_VERSION	bindings: WEBUI_VERSION	
WEBUI_MAX_IDS	webui/bindings.html#WEBUI_MAX_IDS	bindings: WEBUI_MAX_IDS	
Browsers	webui/bindings.html#Browsers	bindings: Browsers	
Events	webui/bindings.html#Events	bindings: Events	
Event	webui/bindings.html#Event	bindings: Event	
Runtime	webui/bindings.html#Runtime	bindings: Runtime	
newWindow	webui/bindings.html#newWindow	bindings: newWindow(): csize_t	
newWindowId	webui/bindings.html#newWindowId,csize_t	bindings: newWindowId(windowNumber: csize_t)	
getNewWindowId	webui/bindings.html#getNewWindowId	bindings: getNewWindowId(): csize_t	
`bind`	webui/bindings.html#bind,csize_t,cstring,proc(ptr.Event)	bindings: `bind`(window: csize_t; element: cstring; func: proc (e: ptr Event) {.cdecl.}): csize_t	
show	webui/bindings.html#show,csize_t,cstring	bindings: show(window: csize_t; content: cstring): bool	
showBrowser	webui/bindings.html#showBrowser,csize_t,cstring,csize_t	bindings: showBrowser(window: csize_t; content: cstring; browser: csize_t): bool	
setKiosk	webui/bindings.html#setKiosk,csize_t,bool	bindings: setKiosk(window: csize_t; status: bool)	
wait	webui/bindings.html#wait	bindings: wait()	
close	webui/bindings.html#close,csize_t	bindings: close(window: csize_t)	
destroy	webui/bindings.html#destroy,csize_t	bindings: destroy(window: csize_t)	
exit	webui/bindings.html#exit	bindings: exit()	
setRootFolder	webui/bindings.html#setRootFolder,csize_t,cstring	bindings: setRootFolder(window: csize_t; path: cstring): bool	
isShown	webui/bindings.html#isShown,csize_t	bindings: isShown(window: csize_t): bool	
setTimeout	webui/bindings.html#setTimeout,csize_t	bindings: setTimeout(second: csize_t)	
setIcon	webui/bindings.html#setIcon,csize_t,cstring,cstring	bindings: setIcon(window: csize_t; icon: cstring; type: cstring)	
setMultiAccess	webui/bindings.html#setMultiAccess,csize_t,bool	bindings: setMultiAccess(window: csize_t; status: bool)	
run	webui/bindings.html#run,csize_t,cstring	bindings: run(window: csize_t; script: cstring)	
script	webui/bindings.html#script,csize_t,cstring,csize_t,cstring,csize_t	bindings: script(window: csize_t; script: cstring; timeout: csize_t; buffer: cstring;\n       bufferLength: csize_t): bool	
setRuntime	webui/bindings.html#setRuntime,csize_t,csize_t	bindings: setRuntime(window: csize_t; runtime: csize_t)	
getInt	webui/bindings.html#getInt,ptr.Event	bindings: getInt(e: ptr Event): clonglong	
getString	webui/bindings.html#getString,ptr.Event	bindings: getString(e: ptr Event): cstring	
getBool	webui/bindings.html#getBool,ptr.Event	bindings: getBool(e: ptr Event): bool	
returnInt	webui/bindings.html#returnInt,ptr.Event,clonglong	bindings: returnInt(e: ptr Event; n: clonglong)	
returnString	webui/bindings.html#returnString,ptr.Event,cstring	bindings: returnString(e: ptr Event; s: cstring)	
returnBool	webui/bindings.html#returnBool,ptr.Event,bool	bindings: returnBool(e: ptr Event; b: bool)	
encode	webui/bindings.html#encode,cstring	bindings: encode(str: cstring): cstring	
decode	webui/bindings.html#decode,cstring	bindings: decode(str: cstring): cstring	
free	webui/bindings.html#free,pointer	bindings: free(ptr: pointer)	
interfaceBind	webui/bindings.html#interfaceBind,csize_t,cstring,proc(csize_t,csize_t,cstring,cstring,cstring)	bindings: interfaceBind(window: csize_t; element: cstring; func: proc (a1: csize_t;\n    a2: csize_t; a3: cstring; a4: cstring; a5: cstring) {.cdecl.}): csize_t	
interfaceSetResponse	webui/bindings.html#interfaceSetResponse,cstring,cstring	bindings: interfaceSetResponse(ptr: cstring; response: cstring)	
interfaceIsAppRunning	webui/bindings.html#interfaceIsAppRunning	bindings: interfaceIsAppRunning(): bool	
interfaceGetWindowId	webui/bindings.html#interfaceGetWindowId,csize_t	bindings: interfaceGetWindowId(window: csize_t): csize_t	
interfaceGetBindId	webui/bindings.html#interfaceGetBindId,csize_t,cstring	bindings: interfaceGetBindId(window: csize_t; element: cstring): csize_t	
